
Voice_Recognition_modulev3_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800060  00800060  0000015a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089a  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f5  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d8  00000000  00000000  000010a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a7  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c5  00000000  00000000  000018cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 39       	cpi	r26, 0x92	; 146
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	28 d0       	rcall	.+80     	; 0x94 <main>
  44:	4e c0       	rjmp	.+156    	; 0xe2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <usart_init>:
		{
			PORTC =~ PORTC;
			break;
		}
	}
}
  48:	26 e8       	ldi	r18, 0x86	; 134
  4a:	20 bd       	out	0x20, r18	; 32
  4c:	90 bd       	out	0x20, r25	; 32
  4e:	89 b9       	out	0x09, r24	; 9
  50:	88 e1       	ldi	r24, 0x18	; 24
  52:	8a b9       	out	0x0a, r24	; 10
  54:	08 95       	ret

00000056 <tx_out>:
  56:	5d 9b       	sbis	0x0b, 5	; 11
  58:	fe cf       	rjmp	.-4      	; 0x56 <tx_out>
  5a:	8c b9       	out	0x0c, r24	; 12
  5c:	08 95       	ret

0000005e <rx_in>:
  5e:	5f 9b       	sbis	0x0b, 7	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <rx_in>
  62:	8c b1       	in	r24, 0x0c	; 12
  64:	08 95       	ret

00000066 <voice_load>:

void voice_load(void)	//80개의 커맨드중 7개를 인식기로 불러들인다.
{
	tx_out(0xAA);
  66:	8a ea       	ldi	r24, 0xAA	; 170
  68:	f6 df       	rcall	.-20     	; 0x56 <tx_out>
	tx_out(0x09);
  6a:	89 e0       	ldi	r24, 0x09	; 9
  6c:	f4 df       	rcall	.-24     	; 0x56 <tx_out>
	tx_out(0x30);
  6e:	80 e3       	ldi	r24, 0x30	; 48
  70:	f2 df       	rcall	.-28     	; 0x56 <tx_out>
	tx_out(0x00);
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	f0 df       	rcall	.-32     	; 0x56 <tx_out>
	tx_out(0x01);
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	ee df       	rcall	.-36     	; 0x56 <tx_out>
	tx_out(0x02);
  7a:	82 e0       	ldi	r24, 0x02	; 2
  7c:	ec df       	rcall	.-40     	; 0x56 <tx_out>
	tx_out(0x03);
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	ea df       	rcall	.-44     	; 0x56 <tx_out>
	tx_out(0x04);
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	e8 df       	rcall	.-48     	; 0x56 <tx_out>
	tx_out(0x05);
  86:	85 e0       	ldi	r24, 0x05	; 5
  88:	e6 df       	rcall	.-52     	; 0x56 <tx_out>
	tx_out(0x06);
  8a:	86 e0       	ldi	r24, 0x06	; 6
  8c:	e4 df       	rcall	.-56     	; 0x56 <tx_out>
	tx_out(0x0A);
  8e:	8a e0       	ldi	r24, 0x0A	; 10
  90:	e2 df       	rcall	.-60     	; 0x56 <tx_out>
  92:	08 95       	ret

00000094 <main>:
}

int main(void)
{
	DDRC = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 bb       	out	0x14, r24	; 20
	usart_init(103);
  98:	87 e6       	ldi	r24, 0x67	; 103
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	d5 df       	rcall	.-86     	; 0x48 <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	81 ee       	ldi	r24, 0xE1	; 225
  a2:	94 e0       	ldi	r25, 0x04	; 4
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x10>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1a>
  ae:	00 00       	nop
	voice_module_init();
	_delay_ms(100);
	voice_record(2);
	*/
	_delay_ms(100);
	voice_load();
  b0:	da df       	rcall	.-76     	; 0x66 <voice_load>
				data = rx_in();
				rx_data[i] = data;
			}
		}
		
		if(rx_data[5] == 0x00)
  b2:	00 e6       	ldi	r16, 0x60	; 96
  b4:	10 e0       	ldi	r17, 0x00	; 0
		{
			PORTC = 0xFF;
  b6:	ff 24       	eor	r15, r15
  b8:	fa 94       	dec	r15
	while(1)
	{
		unsigned char data;
		int i;

		data = rx_in();
  ba:	d1 df       	rcall	.-94     	; 0x5e <rx_in>

		if(data == 0xAA)
  bc:	8a 3a       	cpi	r24, 0xAA	; 170
  be:	31 f4       	brne	.+12     	; 0xcc <main+0x38>
  c0:	c0 e6       	ldi	r28, 0x60	; 96
  c2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(i = 0; data != 0x0A; i++)
			{
				data = rx_in();
  c4:	cc df       	rcall	.-104    	; 0x5e <rx_in>
				rx_data[i] = data;
  c6:	89 93       	st	Y+, r24

		data = rx_in();

		if(data == 0xAA)
		{
			for(i = 0; data != 0x0A; i++)
  c8:	8a 30       	cpi	r24, 0x0A	; 10
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x30>
				data = rx_in();
				rx_data[i] = data;
			}
		}
		
		if(rx_data[5] == 0x00)
  cc:	f8 01       	movw	r30, r16
  ce:	85 81       	ldd	r24, Z+5	; 0x05
  d0:	81 11       	cpse	r24, r1
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x42>
		{
			PORTC = 0xFF;
  d4:	f5 ba       	out	0x15, r15	; 21
		}

		if(rx_data[5] == 0x01)
  d6:	f8 01       	movw	r30, r16
  d8:	85 81       	ldd	r24, Z+5	; 0x05
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	71 f7       	brne	.-36     	; 0xba <main+0x26>
		{
			PORTC = 0x00;
  de:	15 ba       	out	0x15, r1	; 21
  e0:	ec cf       	rjmp	.-40     	; 0xba <main+0x26>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
